#+Title: Racket programming 
#+Date: January 13, 2017
#+Author: Ashay Maheshwari 


* Introduction
  This is a quick note to re-learn/revise Racket programming.


* Install Racket/DrRacket
  http://linuxg.net/how-to-install-drracket-on-ubuntu-12-04-ubuntu-12-10-and-ubuntu-13-04-by-the-command-line-interface/


* Racket tools 
  + racket :: compiler, interpreter and run-time system 
  + DrRacket :: Programming environment and IDE
  + raco :: a command line tool to install packages and libraries.


* Getting started 
  Lanuch DrRacket and get started 

** Meet DrRacket 
   If you have Racket installed, you must have DrRacket IDE launcher
   on Desktop.  Launching DrRacket gives two panes in the IDE.  First
   one is the text area to write your proramms and second one is the
   interactive mode of racket.
   

** Choose your language
   Racket is a family of languages and hence DrRacket the programming
   environment needs a prior information on which language to
   interpret.  Set it to =#lang racket= Click =Run= button towards top
   right. 


** Interact with Racket 
   DrRacket has a text area bottom, which is the racket command-line. You 
   type racket expression and hit enter and get the result printed there. 
   This is called =read-eval-print loop or REPL=
   #+BEGIN_SRC racket 
   > 5
   5
   > "Hello World"
   "Hello World"
   #+END_SRC
   Thats how you will interact with Racket in rest of the tutorial.


** Add two numbers interacting in racket command-line 
   See the example given below -
   #+BEGIN_SRC racket
   > (+ 2 7)
   9
   #+END_SRC
   Observe that the operator is first and then comes two arguments 2
   and 7.  This is similiar to calling a function which say =func-name
   arg1 arg2 argN= This shows that almost eveything defined in racket
   is a procedure.
   Lets see what would happen without parenthesis -
   #+BEGIN_SRC racket
   > + 2 7
   #<procedure:+>
   2 
   7 
   #+END_SRC
   + Observe how racket is interpreting each of those (opeartor, and
     two constants) Its takes all of them i.e. +, 2 and 9 as an
     argument to some hidden function and interpret them as it was
     done in previous section.
   + As expected =2 and 7= are evaluated to themselves as they are
     constants.
   + =+= is evaluated as a procedure =#<procedure:+>= A function and
     when wrapped around parenthesis, it becomes a single expression
     and is evaluted.
   + So if I just give =+= to racket is returns its behavior in the
     program.
     #+BEGIN_SRC racket
     > +
     #<procedure:+>
     #+END_SRC


** Lets write a slightly complex expression
   Mathmatically we want to calculate x = (2 + 7) * (8 + 6).
   Lets write it in racket. 
   #+BEGIN_SRC racket 
   > (* (+ 2 7) (+ 8 6))
   126
   #+END_SRC
   Know BODMAS and its easy. Inner brackets are evaluated first and
   then results are evaulated further.
   It can also be seen as -
   + procedure (+ 2 7) eavalutes and returns 9
   + procedure (+ 8 6) evaluetes and returns 14
   + 9 and 14 become arguments to procedure * and and returns 126
   + =3 function calls= 


** Define a variable 
   You need variables in a programming languages and in racket you do it 
   using =define= keyword 
   #+BEGIN_SRC racket 
   > (define <identifier-name> <value>
   > (define name "ashay")   
   > name 
   "ashay"
   #+END_SRC
   + Here, =define= is a keyword, =name= is a keyword and =ashay= is value
     binded to =name=
   + =name= evaluates to =ashay=
   + Note ::
     You cannot define a variable which is not assigned/binded to a value
     #+BEGIN_SRC racket 
     >(define name)
     . define: bad syntax (missing expression after identifier) in: (define name) 
     #+END_SRC
    

** Comments in racket 
   Use semilcolon ; to comment in racket 
   #+BEGIN_SRC racket
   > ;this is comment 
     2
   2
   #+END_SRC

** Data types in racket 
   Racket includes the following in-built data types 
   =numbers, booleans, strings and byte strings=
   + Numbers :: Anything for integers, decimal points, fractional, long, complex, exponential
     1, 1/2, 1+2i, 3.14, 6.02e+23, 999999999999
   + Booleans ::
     #t, #f, true, false
   + Strings ::
     "hello", "this is a string", "anythings in double quotes"

* References
  + [[https://docs.racket-lang.org/guide/][The Racket Guide]]
  + [[http://linuxg.net/how-to-install-drracket-on-ubuntu-12-04-ubuntu-12-10-and-ubuntu-13-04-by-the-command-line-interface/][Install DrRacket]]
